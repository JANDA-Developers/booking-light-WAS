[{"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\index.tsx":"1","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\apolloClient.tsx":"2","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\cache.ts":"3","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\uri.ts":"4","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\serviceWorker.ts":"5","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\AppWrap.tsx":"6","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\App.tsx":"7","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\context.ts":"8","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\helper.ts":"9","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\AuthRouter.tsx":"10","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\MainRouter.tsx":"11","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\layout\\Layout.tsx":"12","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\signUp\\SignUp.tsx":"13","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\login\\Login.tsx":"14","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\SMSrouter.tsx":"15","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\header\\HeaderWrap.tsx":"16","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\Sidebar.tsx":"17","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\helper.ts":"18","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\Template.tsx":"19","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useUser.ts":"20","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\SidebarSubMenu.tsx":"21","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\SidebarMainMenu.tsx":"22","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\header\\Header.tsx":"23","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\profile\\ProfileModal.tsx":"24","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\utils\\hookGen.ts":"25","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\utils\\query.ts":"26","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\user.ts":"27","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\utils\\onCompletedMessage.ts":"28","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useListQuery.ts":"29","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\fragments.ts":"30","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\History.tsx":"31","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\Init.tsx":"32","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\Sender.tsx":"33","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\type\\api.ts":"34","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useVerification.ts":"35","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\verfi\\PhoneVerificationModal.tsx":"36","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\passwordChecker\\PasswordCheck.tsx":"37","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useQuerySort.ts":"38","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useQueryFilter.ts":"39","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\purchase.ts":"40","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\invoice.ts":"41","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\notification.ts":"42","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\payment.ts":"43","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\zoneInfo.ts":"44","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\item.ts":"45","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\user.ts":"46","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\store.ts":"47","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\verification.ts":"48","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\product.ts":"49","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\passwordChecker\\SecurityLevelViewer.tsx":"50","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\atom\\Timer.tsx":"51"},{"size":684,"mtime":1603508374571,"results":"52","hashOfConfig":"53"},{"size":1109,"mtime":1602210511242,"results":"54","hashOfConfig":"53"},{"size":170,"mtime":1599528336959,"results":"55","hashOfConfig":"53"},{"size":226,"mtime":1604371224918,"results":"56","hashOfConfig":"53"},{"size":5295,"mtime":1599527058737,"results":"57","hashOfConfig":"53"},{"size":898,"mtime":1612074666860,"results":"58","hashOfConfig":"53"},{"size":1756,"mtime":1604546001855,"results":"59","hashOfConfig":"53"},{"size":1189,"mtime":1611458692336,"results":"60","hashOfConfig":"53"},{"size":947,"mtime":1611458692336,"results":"61","hashOfConfig":"53"},{"size":1093,"mtime":1604371582716,"results":"62","hashOfConfig":"53"},{"size":3534,"mtime":1604576461940,"results":"63","hashOfConfig":"53"},{"size":698,"mtime":1604371582716,"results":"64","hashOfConfig":"53"},{"size":6672,"mtime":1612058114902,"results":"65","hashOfConfig":"53"},{"size":2946,"mtime":1612074647832,"results":"66","hashOfConfig":"53"},{"size":2712,"mtime":1603937743214,"results":"67","hashOfConfig":"53"},{"size":3827,"mtime":1612068621205,"results":"68","hashOfConfig":"53"},{"size":7966,"mtime":1611458692643,"results":"69","hashOfConfig":"53"},{"size":295,"mtime":1603594948527,"results":"70","hashOfConfig":"53"},{"size":600,"mtime":1603249810487,"results":"71","hashOfConfig":"53"},{"size":3020,"mtime":1612084707491,"results":"72","hashOfConfig":"53"},{"size":1778,"mtime":1603597374246,"results":"73","hashOfConfig":"53"},{"size":748,"mtime":1603503397674,"results":"74","hashOfConfig":"53"},{"size":840,"mtime":1603519953703,"results":"75","hashOfConfig":"53"},{"size":1914,"mtime":1603676680825,"results":"76","hashOfConfig":"53"},{"size":4442,"mtime":1611663359916,"results":"77","hashOfConfig":"53"},{"size":5799,"mtime":1612085100493,"results":"78","hashOfConfig":"53"},{"size":3182,"mtime":1611670025919,"results":"79","hashOfConfig":"53"},{"size":1133,"mtime":1603586849813,"results":"80","hashOfConfig":"53"},{"size":1279,"mtime":1611578637569,"results":"81","hashOfConfig":"53"},{"size":1300,"mtime":1611476546810,"results":"82","hashOfConfig":"53"},{"size":746,"mtime":1601961300530,"results":"83","hashOfConfig":"53"},{"size":850,"mtime":1603414669563,"results":"84","hashOfConfig":"53"},{"size":655,"mtime":1601961974366,"results":"85","hashOfConfig":"53"},{"size":134465,"mtime":1611671513398,"results":"86","hashOfConfig":"53"},{"size":2544,"mtime":1612084998486,"results":"87","hashOfConfig":"53"},{"size":2982,"mtime":1612057976942,"results":"88","hashOfConfig":"53"},{"size":855,"mtime":1612055050847,"results":"89","hashOfConfig":"53"},{"size":1165,"mtime":1611578508971,"results":"90","hashOfConfig":"53"},{"size":2778,"mtime":1611668319520,"results":"91","hashOfConfig":"53"},{"size":1070,"mtime":1611476549806,"results":"92","hashOfConfig":"53"},{"size":834,"mtime":1611461017873,"results":"93","hashOfConfig":"53"},{"size":1159,"mtime":1611462966806,"results":"94","hashOfConfig":"53"},{"size":891,"mtime":1611462987180,"results":"95","hashOfConfig":"53"},{"size":171,"mtime":1611456503395,"results":"96","hashOfConfig":"53"},{"size":359,"mtime":1611458766378,"results":"97","hashOfConfig":"53"},{"size":457,"mtime":1611456943171,"results":"98","hashOfConfig":"53"},{"size":502,"mtime":1611463007741,"results":"99","hashOfConfig":"53"},{"size":683,"mtime":1611670422734,"results":"100","hashOfConfig":"53"},{"size":306,"mtime":1611459308855,"results":"101","hashOfConfig":"53"},{"size":3221,"mtime":1612083749888,"results":"102","hashOfConfig":"53"},{"size":1357,"mtime":1601973270797,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1bywphl",{"filePath":"107","messages":"108","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"106"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"112"},{"filePath":"118","messages":"119","errorCount":2,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"112"},{"filePath":"126","messages":"127","errorCount":3,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"106"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"106"},{"filePath":"135","messages":"136","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":4,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"106"},{"filePath":"141","messages":"142","errorCount":2,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":4,"warningCount":1,"fixableErrorCount":4,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"106"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"112"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":1,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"106"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"106"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":10,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":10,"warningCount":11,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"112"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"106"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"106"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":2,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"112"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"227","messages":"228","errorCount":2,"warningCount":9,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":1,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"106"},"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\index.tsx",[],[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\apolloClient.tsx",["232"],"import { ApolloClient, from } from \"@apollo/client\";\r\nimport dotenv from \"dotenv\";\r\nimport uri from \"./uri\";\r\nimport cache from \"./cache\";\r\n// @ts-ignore\r\nimport { createUploadLink } from \"apollo-upload-client\";\r\nimport { toast } from \"@janda-com/front\";\r\nimport { onError } from \"@apollo/client/link/error\";\r\n\r\nconst headers = {\r\n};\r\n\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors) {\r\n    graphQLErrors.map(({ message, locations, path }) => {\r\n      console.warn(\r\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n      );\r\n    });\r\n    toast.warn(\"알수 없는 문제가 발생했습니다. 문의 부탁드립니다.\");\r\n  } else if (networkError) {\r\n    toast.warn(\"서버가 응답하지 않습니다.\");\r\n  }\r\n});\r\n\r\nconst fileUploadLink = createUploadLink({\r\n  uri,\r\n  headers,\r\n  credentials: \"include\",\r\n});\r\n\r\ndotenv.config({\r\n  path: \"../.env\",\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: from([fileUploadLink, errorLink]),\r\n  uri,\r\n  cache,\r\n  headers,\r\n  credentials: \"include\",\r\n});\r\n\r\nexport default client;","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\cache.ts",[],[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\uri.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\serviceWorker.ts",["233","234"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\AppWrap.tsx",["235","236","237","238","239","240"],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\App.tsx",["241","242","243","244","245","246","247","248","249","250","251"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport './scss/App.scss';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport MainRouter from './MainRouter';\r\nimport AuthRouter from './AuthRouter';\r\nimport { IIcons } from '@janda-com/front/dist/components/icons/declation';\r\nimport { JDpreloader, JDtooltip, ReactTooltip } from '@janda-com/front';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Toast } from '@janda-com/front';\r\nimport { ME } from './apollo/queries';\r\nimport { me, me_Me as IMe, me_Me_stores as IStore } from './type/api';\r\nimport AppContext, { APPcontextProvider, useAppContext } from \"./context\"\r\nimport extractDoc from './utils/dataExtraction';\r\nimport { Layout } from './component/layout/Layout';\r\nimport { IselectedOption } from '@janda-com/front/dist/types/interface';\r\nimport { generateContext } from './helper';\r\nimport { TRefech } from './type/interface';\r\n\r\ninterface IAppProp {\r\n  me?: IMe\r\n  stores?: IStore[]\r\n  authRefetch?: TRefech<me>\r\n}\r\n\r\nconst App: React.FC<IAppProp> = ({ me, stores, authRefetch }) => {\r\n  const context = useAppContext(generateContext(stores, me))\r\n\r\n  useEffect(() => {\r\n    context.updateContext(context)\r\n  }, [me])\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <APPcontextProvider value={context}>\r\n        <Router >\r\n          <Layout>\r\n            <Switch>\r\n              <Route path=\"/auth\" render={() => <AuthRouter />} />\r\n              <Route\r\n                path={\"/\"}\r\n                render={() => <MainRouter />}\r\n              />\r\n            </Switch>\r\n          </Layout>\r\n        </Router>\r\n        <Toast />\r\n        <ReactTooltip id=\"mainTooltip\" />\r\n      </APPcontextProvider>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\context.ts",["252"],"import { IselectedOption } from \"@janda-com/front/dist/types/interface\";\r\nimport React, { useState } from \"react\";\r\nimport { me_Me as MyProfile } from \"./type/api\";\r\n\r\n\r\nexport type TProductStoreMath = {\r\n  prodId: string;\r\n  storeId: string;\r\n}\r\n\r\nexport interface IAppContext {\r\n  updateContext: (prop: Partial<IAppContext>) => void;\r\n  prodStoreMatcher: TProductStoreMath[]\r\n  storeOptions: IselectedOption[]\r\n  prodOptions: IselectedOption[]\r\n  user?: MyProfile;\r\n}\r\n\r\nexport const DEFAULT_APP_CONTEXT: IAppContext = {\r\n  updateContext: () => undefined,\r\n  prodOptions: [],\r\n  storeOptions: [],\r\n  prodStoreMatcher: []\r\n};\r\n\r\nconst AppContext = React.createContext<IAppContext>(\r\n    DEFAULT_APP_CONTEXT\r\n);\r\n\r\nexport const useAppContext = (defaultContext: Partial<IAppContext> = DEFAULT_APP_CONTEXT) => {\r\n  const [context, setContext] = useState({\r\n    ...DEFAULT_APP_CONTEXT,\r\n    ...defaultContext,\r\n  });\r\n\r\n  const updateContext = (props: Partial<IAppContext>) => {\r\n    setContext({\r\n      ...context,\r\n      ...props,\r\n    });\r\n  };\r\n\r\n  return {\r\n    ...context,\r\n    updateContext,\r\n  };\r\n};\r\n\r\nexport const APPcontextProvider = AppContext.Provider;\r\nexport default AppContext;","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\helper.ts",["253","254","255"],"import { IselectedOption } from \"@janda-com/front/dist/types/interface\";\r\nimport { IAppContext, TProductStoreMath } from \"./context\";\r\nimport { me_Me as IMe, me_Me_stores as Stores } from \"./type/api\";\r\n\r\n  \r\nexport const generateContext = (storeData?: Stores[],user?: IMe):Partial<IAppContext> => {\r\n\r\n    let storeOptions: IselectedOption[] = [];\r\n    let prodOptions: IselectedOption[] = [];\r\n    let prodStoreMatcher:TProductStoreMath[] = []\r\n\r\n  \r\n    storeData?.forEach((sto) => {\r\n      storeOptions.push({\r\n        label: sto.name,\r\n        value: sto._id\r\n      })\r\n  \r\n      sto.products.forEach((pro) => {\r\n  \r\n        prodStoreMatcher.push({\r\n          prodId: pro._id,\r\n          storeId: sto._id\r\n        })\r\n  \r\n        prodOptions.push({\r\n          label: pro.name,\r\n          value: pro._id\r\n        })\r\n      })\r\n    })\r\n\r\n    return {\r\n        prodStoreMatcher,\r\n        prodOptions,\r\n        storeOptions,\r\n        user,\r\n    }\r\n}","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\AuthRouter.tsx",["256","257","258"],"import { JDpreloader } from \"@janda-com/front\";\r\nimport React, { Suspense, useContext, useEffect } from \"react\";\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport AppContext from \"./context\";\r\n\r\nconst LoginPage = React.lazy(() => import('./page/login/Login'));\r\nconst SignUpPage = React.lazy(() => import('./page/signUp/SignUp'));\r\n\r\nexport enum AuthPaths {\r\n    signUp = '/auth/signUp',\r\n    login = '/auth/login',\r\n}\r\n\r\nconst MainRouter = () => {\r\n    const { } = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n    return <Switch>\r\n        <Suspense fallback={<JDpreloader page loading />}>\r\n            <Route\r\n                exact={true}\r\n                path={AuthPaths.signUp}\r\n                render={() => {\r\n                    return <SignUpPage />;\r\n                }}\r\n            />\r\n            <Route\r\n                exact={true}\r\n                path={AuthPaths.login}\r\n                render={() => {\r\n                    return <LoginPage />;\r\n                }}\r\n            />\r\n        </Suspense>\r\n    </Switch>\r\n}\r\n\r\nexport default MainRouter;","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\MainRouter.tsx",["259","260"],"import { } from \"@janda-com/front\";\r\nimport React, { Suspense } from \"react\";\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport SMSRouter from \"./page/sms/SMSrouter\";\r\nconst productListtingWrap = React.lazy(() => import(\"./page/productListting/productListtingWrap\"));\r\nconst StoreSettingWrap = React.lazy(() => import(\"./page/storeSetting/StoreSettingWrap\"));\r\nconst DailyPricePage = React.lazy(() => import('./page/price/DailyPriceWrap'));\r\nconst PayConfigPage = React.lazy(() => import('./page/pagConfig/PayConfigWrap'));\r\nconst StaticPage = React.lazy(() => import('./page/static/Static'));\r\nconst DashboardPage = React.lazy(() => import('./page/dashboard/dashboard/DashboardWrap'));\r\nconst ProductBoardPage = React.lazy(() => import('./page/dashboard/productBoard/ProductBoard'));\r\nconst SalesListPage = React.lazy(() => import('./page/sale/SalesListWrap'));\r\nconst ProductGroupPage = React.lazy(() => import('./page/productGroupSetting/ProductGorupSettingWrap'));\r\nconst ProductBoardPageWrap = React.lazy(() => import('./page/sale/SalesListWrap'));\r\nconst ProductCapcityPage = React.lazy(() => import('./page/productCapacity/ProductCapacityWrap'));\r\n\r\nexport enum Paths {\r\n  sms = '/sms',\r\n  price = '/price-set',\r\n  saleList = '/sale-list',\r\n  storeUserList = '/store-user-list',\r\n  payToJanda = '/pay-to-janda',\r\n  payFromJanda = '/pay-from-janda',\r\n  productBoard = '/product-board',\r\n  productList = '/productList',\r\n  productGroup = '/productGroup',\r\n  productCapacity = '/productCapacity',\r\n  storeset = '/storeset',\r\n  main = '/',\r\n}\r\n\r\n\r\nconst MainRouter = () => {\r\n  return <Switch>\r\n    <Suspense fallback={<div >loading...</div>}>\r\n      <Route\r\n        path={Paths.sms}\r\n        render={() => {\r\n          return <SMSRouter />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.price}\r\n        render={() => {\r\n          return <DailyPricePage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.saleList}\r\n        render={() => {\r\n          return <SalesListPage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.storeUserList}\r\n        render={() => {\r\n          return <PayConfigPage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.payToJanda}\r\n        render={() => {\r\n          return <StaticPage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.payFromJanda}\r\n        render={() => {\r\n          return <PayConfigPage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.main}\r\n        render={() => {\r\n          return <DashboardPage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.productList}\r\n        render={() => {\r\n          return <productListtingWrap />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.storeset}\r\n        render={() => {\r\n          return <StoreSettingWrap />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.productBoard}\r\n        render={() => {\r\n          return <ProductBoardPage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.productGroup}\r\n        render={() => {\r\n          return <ProductGroupPage />;\r\n        }}\r\n      />\r\n      <Route\r\n        exact={true}\r\n        path={Paths.productCapacity}\r\n        render={() => {\r\n          return <ProductCapcityPage />;\r\n        }}\r\n      />\r\n    </Suspense>\r\n  </Switch>\r\n}\r\n\r\nexport default MainRouter;\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\layout\\Layout.tsx",["261","262","263"],"import { Flex } from '@janda-com/front';\r\nimport React, { useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AppContext from '../../context';\r\nimport HeaderWrap from '../header/HeaderWrap';\r\nimport Sidebar from '../sidebar/Sidebar';\r\n\r\ninterface IProp { }\r\n\r\nexport const Layout: React.FC<IProp> = ({ children }) => {\r\n    const { user } = useContext(AppContext);\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const history = useHistory();\r\n\r\n\r\n    return <Flex oneone >\r\n        <Sidebar isOpen={isOpen} />\r\n        <div>\r\n            <HeaderWrap setSide={setIsOpen} sideOpen={isOpen} />\r\n            {children}\r\n        </div>\r\n    </Flex>;\r\n};\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\signUp\\SignUp.tsx",["264","265","266","267","268","269","270"],"import { Flex, isEmail, isPassword, isPhone, JDbutton, JDcheckBox, JDlabel, useCheckBox, useInput, useModal, Validater } from '@janda-com/front';\r\nimport Button from '@janda-com/front/dist/components/button/Button';\r\nimport { InputText } from '@janda-com/front/dist/components/InputText/InputText';\r\nimport PolicyViewer from '@janda-com/front/dist/components/policy/PolicyViewer';\r\nimport PrivacyPolicy from '@janda-com/front/dist/components/policy/PrivacyPolicy';\r\nimport React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport PasswordChecker from '../../component/passwordChecker/PasswordCheck';\r\nimport PhoneVerificationModal from '../../component/verfi/PhoneVerificationModal';\r\nimport { useVerification } from '../../hook/useVerification';\r\nimport { VerificationEvent, VerificationTarget } from '../../type/api';\r\n\r\nexport type TSignUpInfo = {\r\n    agree: boolean;\r\n    email: string;\r\n    name: string;\r\n    num: string;\r\n    company: string;\r\n    password: string;\r\n};\r\n\r\nexport interface IProps { }\r\n\r\nconst SignUpUI: React.FC<IProps> = ({\r\n}) => {\r\n    const isDev = process.env.NODE_ENV === 'development';\r\n    const verificationHook = useVerification(VerificationEvent.UserVerifyPhone, VerificationTarget.PHONE)\r\n    const phoneVerifiModal = useModal();\r\n    const agreePolicyHook = useCheckBox(true);\r\n    const emailHook = useInput(isDev ? 'colton950901@gmail.com' : '');\r\n    const nameHook = useInput(isDev ? '개발' : '');\r\n    const phoneNumberHook = useInput(isDev ? '01052374492' : '');\r\n    const companyNameHook = useInput(isDev ? 'janda' : '');\r\n    const passwordHook = useInput(isDev ? '#janda123' : '');\r\n    const passwordCheckHook = useInput(isDev ? '#janda123' : '');\r\n\r\n    const info: TSignUpInfo = {\r\n        agree: agreePolicyHook.checked,\r\n        email: emailHook.value,\r\n        name: nameHook.value,\r\n        num: phoneNumberHook.value,\r\n        company: companyNameHook.value,\r\n        password: passwordHook.value,\r\n    };\r\n\r\n    const { validate } = new Validater([\r\n        {\r\n            value: isPhone(phoneNumberHook.value),\r\n            failMsg: '올바른 번호가 아닙니다.',\r\n            id: \"PasswordInput\"\r\n        }, {\r\n            value: isEmail(emailHook.value),\r\n            failMsg: '올바른 이메일이 아닙니다.',\r\n            id: 'EmailInput'\r\n        }, {\r\n            value: agreePolicyHook.checked,\r\n            failMsg: '개인정보 동의 부탁드립니다.',\r\n            id: \"AgreePolicy\",\r\n        }, {\r\n            value: passwordCheckHook.value !== passwordHook.value,\r\n            failMsg: '비밀번호가 일치하지 않습니다.',\r\n            id: \"AgreePolicy\"\r\n        }, {\r\n            value: companyNameHook.value,\r\n            failMsg: '회사명을 입력 해주세요.',\r\n            id: \"CompanayName\"\r\n        }, {\r\n            value: passwordHook.isValid,\r\n            failMsg: '올바른 비밀번호가 아닙니다.',\r\n            id: \"PasswordInput\"\r\n        }])\r\n\r\n\r\n\r\n    const handleSignUp = () => {\r\n        if (validate()) {\r\n\r\n        }\r\n    }\r\n\r\n    const handleDuplicateCheck = () => {\r\n\r\n    }\r\n\r\n    const handleVerifi = () => {\r\n        if (validate([1]))\r\n            phoneVerifiModal.openModal()\r\n    }\r\n\r\n    return (\r\n        <div className={`signup`}>\r\n            <div className=\"JDstandard JDstandard-largest-mb\">\r\n                <div>\r\n                    <InputText mb id=\"NameInput\" label={'성함'} {...nameHook} />\r\n                </div>\r\n                <Flex>\r\n                    <InputText\r\n                        mb\r\n                        mr\r\n                        autoComplete=\"off\"\r\n                        id=\"EmailInput\"\r\n                        label={'이메일'}\r\n                        {...emailHook}\r\n                    />\r\n                    <Button onClick={handleDuplicateCheck}>중복확인</Button>\r\n                </Flex>\r\n                <JDlabel txt={'핸드폰번호'} />\r\n                <Flex\r\n                    mb\r\n                    vCenter\r\n                    grow\r\n                >\r\n                    <InputText\r\n                        id=\"PhoneNumberInput\"\r\n                        hyphen\r\n                        {...phoneNumberHook}\r\n                        mb=\"no\"\r\n                    />\r\n                    <Button onClick={handleVerifi}>인증하기</Button>\r\n                </Flex>\r\n                <div>\r\n                    <InputText\r\n                        mb\r\n                        type=\"password\"\r\n                        id=\"PasswordInput\"\r\n                        label={'비밀번호'}\r\n                        validation={isPassword}\r\n                        {...passwordHook}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <InputText\r\n                            type=\"password\"\r\n                            id=\"PasswordCheckInput\"\r\n                            label={'비밀번호 확인'}\r\n                            {...passwordCheckHook}\r\n                        />\r\n                    </div>\r\n                    <p className=\"JDsmall-text\">\r\n                        <PasswordChecker txt={passwordHook.value} />\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <InputText mb id=\"CompanayName\" label={'회사명'} {...companyNameHook} />\r\n                </div>\r\n                <div>\r\n                    <PolicyViewer>{PrivacyPolicy}</PolicyViewer>\r\n                </div>\r\n                <div>\r\n                    <JDcheckBox\r\n                        mb\r\n                        mr\r\n                        id=\"AgreePolicy\"\r\n                        label={'개인정보제공동의'}\r\n                        {...agreePolicyHook}\r\n                    />\r\n                    <JDcheckBox\r\n                        mb\r\n                        id=\"AgreePolicy\"\r\n                        label={'개인정보제공 비 동의'}\r\n                        checked={!agreePolicyHook.checked}\r\n                        onChange={() => {\r\n                            agreePolicyHook.onChange(false);\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <PhoneVerificationModal {...verificationHook} payload={phoneNumberHook.value} modalHook={phoneVerifiModal} />\r\n            <JDbutton\r\n                mb=\"no\"\r\n                thema=\"primary\"\r\n                className=\"\"\r\n                id=\"SingupSubmitBtn\"\r\n                label={'회원가입 완료'}\r\n                onClick={handleSignUp}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUpUI;\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\login\\Login.tsx",["271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296"],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\SMSrouter.tsx",["297"],"import React from 'react';\r\nimport JDSMS from \"@janda-com/sms\"\r\nimport { JDpreloader } from '@janda-com/front';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport SenderPage from './page/Sender';\r\nimport HistoryPage from './page/History';\r\nimport InitPage from './page/Init';\r\nimport TemplatePage from './page/Template';\r\n\r\nexport enum SmsPaths {\r\n  template = '/sms/template',\r\n  history = '/sms/history',\r\n  init = '/sms/init',\r\n  sender = '/sms/sender',\r\n}\r\n\r\ninterface IProp {\r\n  smsKey?: string;\r\n}\r\n\r\nexport const SMSRouter: React.FC<IProp> = ({ smsKey }) => {\r\n\r\n  const SMSCore = new JDSMS({\r\n    autoSendCases: [\r\n      { label: '고객이 카드 예약시 나에게', value: '111' },\r\n      { label: '고객이 카드 예약시 고객에게', value: '1111' },\r\n      { label: '고객이 예약을 취소시 나에게', value: '1111' },\r\n      { label: '고객이 예약을 취소시 고객에게', value: '1111' },\r\n      { label: '고객이 예약을 취소할시 나에게', value: '1112' },\r\n      { label: '고객이 무통장입금 예약시 고객에게', value: '1113' },\r\n      { label: '고객이 무통장입금 예약시 나에게', value: '1114' },\r\n      { label: '내가 예약시 고객에게', value: '!23235' },\r\n      { label: '내가 예약을 취소시 고객에게', value: '!2323' },\r\n    ],\r\n    templateCreateDefulatTriggerTag: [\r\n      {\r\n        key: 'storeKey',\r\n        value: '스토어',\r\n      },\r\n    ],\r\n    smsReplaceKeys: [\r\n      {\r\n        label: '이용 시작 시간 (년월일) 시간',\r\n        value: '{TIME_FOR_USAGE}',\r\n      },\r\n    ],\r\n    smsKey: \"\",\r\n  });\r\n\r\n\r\n\r\n  // if (!smsKey) {\r\n  //   return (\r\n  //     <div>\r\n  //       <InitPage\r\n  //         Core={SMSCore}\r\n  //         mode=\"start\"\r\n  //       />\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route\r\n          exact={true}\r\n          path={SmsPaths.init}\r\n          render={() => {\r\n            return <InitPage Core={SMSCore} />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact={true}\r\n          path={SmsPaths.template}\r\n          render={() => {\r\n            return <TemplatePage Core={SMSCore} />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact={true}\r\n          path={SmsPaths.history}\r\n          render={() => {\r\n            return <HistoryPage\r\n              Core={SMSCore}\r\n            />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact={true}\r\n          path={SmsPaths.sender}\r\n          render={() => {\r\n            return <SenderPage Core={SMSCore} />;\r\n          }}\r\n        />\r\n      </Switch>\r\n\r\n      <JDpreloader floating loading={true} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SMSRouter\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\header\\HeaderWrap.tsx",["298","299","300","301","302"],"import { useMutation } from '@apollo/client';\r\nimport { } from '@apollo/client/utilities';\r\nimport { JDnoti, JDavatar, useDropDown, useFilesManager, JDalign, JDiconSearchInput, JDsearchInput, Bold, toast, JDpreloader, onCompletedMessage, LocalManager } from '@janda-com/front';\r\nimport { ISet } from '@janda-com/front/dist/types/interface';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSignOut } from '../../hook/useUser';\r\nimport { completeMsg } from '../../utils/utils';\r\nimport ProfileModal, { Tservice } from '../profile/ProfileModal';\r\nimport Header from './Header';\r\n\r\nconst DataMypageInfo = {\r\n    userInfo: {\r\n        image: \"\",\r\n        name: \"이서진\",\r\n        version: \"JANDA Booking Light Version 이용 중\"\r\n    },\r\n}\r\n\r\ninterface IProp {\r\n    key?: string;\r\n    sideOpen: boolean;\r\n    setSide: ISet<boolean>;\r\n}\r\n\r\nexport const HeaderWrap: React.FC<IProp> = ({ setSide, sideOpen }) => {\r\n    const uploader = useFilesManager();\r\n    const history = useHistory();\r\n    const dropDownHook = useDropDown();\r\n    const [search, setSearch] = useState(\"\");\r\n    const [signOut] = useSignOut({\r\n        onCompleted: ({ SignOut }) => {\r\n            if (SignOut.ok) {\r\n                history.push(\"/\")\r\n            }\r\n        }\r\n    })\r\n\r\n    const services: Tservice[] = [\r\n        {\r\n            icon: \"menu\",\r\n            title: \"환경설정\",\r\n            onClick: () => {\r\n                toast(\"준비중입니다.\")\r\n            }\r\n        },\r\n        {\r\n            icon: \"menu\",\r\n            title: \"고객센터\",\r\n            onClick: () => {\r\n                toast(\"준비중입니다.\")\r\n            }\r\n        },\r\n        {\r\n            icon: \"menu\",\r\n            title: \"마이페이지\",\r\n            onClick: () => {\r\n                toast(\"준비중입니다.\")\r\n            }\r\n        },\r\n        {\r\n            icon: \"menu\",\r\n            title: \"로그아웃\",\r\n            onClick: () => {\r\n                signOut()\r\n            }\r\n        }\r\n    ]\r\n\r\n\r\n    return <Header onMenuClick={() => {\r\n        setSide(!sideOpen)\r\n    }}>\r\n        <JDalign style={{\r\n            position: \"relative\"\r\n        }} flex={{\r\n            vCenter: true\r\n        }}>\r\n            <JDsearchInput\r\n                mr=\"large\"\r\n                SearchComponent={(prop) => <div>\r\n                    <JDiconSearchInput {...prop} />\r\n                </div>}\r\n                onSelectData={() => {\r\n                    console.log(\"\");\r\n                }}\r\n                onSearchChange={v => {\r\n                    setSearch(v);\r\n                }}\r\n                enterBehavior=\"scroll\"\r\n                head={'DummyData'}\r\n                dataList={[]}\r\n                searchValue={search}\r\n            />\r\n            <JDalign mr=\"large\">\r\n                <JDnoti iconProp={{\r\n                    badge: \"1\",\r\n                    size: \"small\",\r\n                    color: \"white\",\r\n                    tooltip: \"새로운 알림이 N개 있습니다.\",\r\n                }} notiLines={[{\r\n                    date: new Date(),\r\n                    title: \"샘플노티1\",\r\n                    desc: \"샘플노트DESC\",\r\n                    key: \"sample1\"\r\n                }]} />\r\n            </JDalign>\r\n            <JDavatar hover size=\"small\" onClick={(e) => {\r\n                e.stopPropagation();\r\n                const cooldinate = {\r\n                    top: '2.5rem',\r\n                    right: 0\r\n                }\r\n                dropDownHook.open(undefined, cooldinate)\r\n            }} uploader={uploader} />\r\n            <ProfileModal dropBoxHook={dropDownHook} userInfo={DataMypageInfo.userInfo} services={services} />\r\n            <JDpreloader loading={loading} />\r\n        </JDalign>\r\n    </Header>;\r\n};\r\n\r\n\r\nexport default HeaderWrap;","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\Sidebar.tsx",["303","304","305","306","307"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport SidebarMainMenu from './SidebarMainMenu'\r\nimport SidebarSubMenu, { TSidebarSub } from './SidebarSubMenu'\r\nimport { IIcons } from '@janda-com/front/dist/components/icons/declation';\r\nimport { Bold, Flex, JDalign, JDtypho, Tiny } from '@janda-com/front';\r\nimport { Paths } from '../../MainRouter';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { SmsPaths } from '../../page/sms/SMSrouter';\r\nimport { getUrlIndex } from \"./helper\";\r\nimport AppContext, { IAppContext } from '../../context';\r\nimport dayjs from \"dayjs\";\r\nimport { AuthPaths } from '../../AuthRouter';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport interface IMenu {\r\n    icon: IIcons,\r\n    title: string,\r\n    sub: TSidebarSub[];\r\n}\r\n\r\nexport const getMenuData = (context: IAppContext): IMenu[] => {\r\n    const { storeOptions, user } = context;\r\n\r\n    const logined: boolean = !!user;\r\n    const haveStore: boolean = !isEmpty(storeOptions);\r\n    // const payConfiged: boolean;\r\n    // const isExpired: boolean;\r\n    // const haveProduct: boolean;\r\n    const smsInited: boolean = !!user?.smsKey;\r\n\r\n    const unLogined = {\r\n        redirect: AuthPaths.login,\r\n        disabledTooltip: \"로그인후 이용 해주세요.\"\r\n    }\r\n\r\n    const noStore = {\r\n        redirect: Paths.storeset,\r\n        disabledTooltip: \"상점을 하나이상 생성 해주세요.\"\r\n    }\r\n\r\n    const noSmsKey = {\r\n        redirect: Paths.sms,\r\n        disabledTooltip: \"SMS를 먼저 시작해주세요.\"\r\n    }\r\n\r\n    const loginAndStore = logined ? noStore : unLogined;\r\n\r\n    const sharedSMS = logined ? noSmsKey : unLogined;\r\n\r\n\r\n    const MainMenuData: IMenu[] = [\r\n        {\r\n            icon: \"houseGear\",\r\n            title: \"홈\",\r\n            sub: [\r\n                {\r\n                    icon: \"home\",\r\n                    title: \"홈\",\r\n                    path: Paths.main,\r\n                    disabled: !logined || !haveStore,\r\n                    ...loginAndStore\r\n                },\r\n                {\r\n                    icon: \"home\",\r\n                    title: \"상품현황\",\r\n                    path: Paths.productBoard,\r\n                    disabled: !logined || !haveStore,\r\n                    ...loginAndStore\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            icon: \"box2\",\r\n            title: \"상품\",\r\n            sub: [\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"상품목록 1\",\r\n                    path: Paths.productList,\r\n                    disabled: !logined || !haveStore,\r\n                    ...loginAndStore\r\n                },\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"상품그룹\",\r\n                    path: Paths.productGroup,\r\n                    disabled: !logined || !haveStore,\r\n                    ...loginAndStore\r\n                },\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"상품 수량조절\",\r\n                    path: Paths.productCapacity,\r\n                    disabled: !logined || !haveStore,\r\n                    ...loginAndStore\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            icon: \"store\",\r\n            title: \"상점\",\r\n            sub: [\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"상점설정\",\r\n                    path: Paths.storeset,\r\n                    disabled: !logined,\r\n                    ...unLogined\r\n                },\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"판매목록\",\r\n                    path: Paths.saleList,\r\n                    disabled: !logined || !haveStore,\r\n                    ...loginAndStore\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            icon: \"book\",\r\n            title: \"결제\",\r\n            sub: [\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"정산관리\",\r\n                    path: Paths.payFromJanda,\r\n                    disabled: !logined,\r\n                    ...unLogined\r\n                },\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"멤버쉽\",\r\n                    path: Paths.payToJanda,\r\n                    disabled: !logined,\r\n                    ...unLogined\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            icon: \"sms\",\r\n            title: \"SMS\",\r\n            sub: [\r\n                {\r\n                    icon: \"info\",\r\n                    title: \"시작하기\",\r\n                    path: SmsPaths.init,\r\n                    disabled: !logined,\r\n                    ...unLogined\r\n                },\r\n                {\r\n                    icon: \"addCircle\",\r\n                    title: \"템플릿 설정\",\r\n                    path: SmsPaths.template,\r\n                    disabled: !logined || !smsInited,\r\n                    ...sharedSMS\r\n                },\r\n                {\r\n                    icon: \"email\",\r\n                    title: \"발신자 관리\",\r\n                    path: SmsPaths.sender,\r\n                    disabled: !logined || !smsInited,\r\n                    ...sharedSMS\r\n                },\r\n                {\r\n                    icon: \"historyWatch\",\r\n                    title: \"발신 히스토리\",\r\n                    path: SmsPaths.history,\r\n                    disabled: !logined || !smsInited,\r\n                    ...sharedSMS\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            icon: \"info\",\r\n            title: \"고객센터\",\r\n            sub: [\r\n                {\r\n                    icon: \"menu\",\r\n                    title: \"Service 설정 1\",\r\n                    path: \"/\",\r\n                    disabled: !logined,\r\n                    ...unLogined\r\n                },\r\n            ]\r\n        },\r\n    ]\r\n\r\n    return MainMenuData;\r\n}\r\n\r\n\r\nexport interface IProps {\r\n    isOpen: boolean;\r\n}\r\n\r\nconst Sidebar: React.FC<IProps> = ({ isOpen }) => {\r\n    const context = useContext(AppContext);\r\n    const { user } = context;\r\n    const { pathname } = useLocation();\r\n    const menuData = getMenuData(context)\r\n    const [menuIndex, setMenuIndex] = useState((getUrlIndex(pathname, menuData)))\r\n\r\n    let history = useHistory();\r\n\r\n    const handleMainMenuClick = (index: number) => {\r\n        setMenuIndex(index);\r\n    }\r\n\r\n    const handleSubMenuClick = (path: string) => {\r\n        history.push(path);\r\n    }\r\n\r\n    const { name, createdAt } = user || {};\r\n\r\n    // 로그인 onclick, login, logout 추가 y\r\n    return (\r\n        <div className={`sidebar ${isOpen || 'sidebar--close'} ${user || 'sidebar--unLogined'}`}>\r\n            <Flex oneone className=\"sidebar__head\">\r\n                <div className=\"sidebar__logo\">\r\n                    A\r\n                </div>\r\n                <JDalign className=\"sidebar__infozone\" text={\"center\"}>\r\n                    <Bold flex={{ vEnd: true, center: true }} mb=\"superTiny\">{name} <Tiny>님</Tiny></Bold>\r\n                    <JDtypho size=\"tiny\">\r\n                        시작일 {dayjs(createdAt).format(\"YYYY MM DD hh:mm:ss\")}\r\n                    </JDtypho>\r\n                </JDalign>\r\n            </Flex>\r\n            <nav className=\"sidebar__menu\">\r\n                <ul className=\"mainMenu\">\r\n                    {\r\n                        menuData.map((menu, i) =>\r\n                            <SidebarMainMenu selected={menuIndex === i} onMenuClick={handleMainMenuClick} key={`sidebarMain_${i}`} menu={menu} index={i} />)\r\n                    }\r\n                </ul>\r\n                <ul className=\"subMenu\">\r\n                    {menuData[menuIndex]?.sub.map((menu, index) =>\r\n                        <SidebarSubMenu onMenuClick={handleSubMenuClick} key={`submenuList-${index}`} menu={menu} />\r\n                    )}\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\helper.ts",["308"],"import { IMenu } from \"./Sidebar\";\r\n\r\nexport const getUrlIndex = (pathName:string,menu:IMenu[]) => {\r\n    const dataIndex = menu.findIndex(m => {\r\n        const exsit = !!m.sub.find((sb) =>  pathName === sb.path)\r\n        return exsit\r\n    })\r\n\r\n\r\n    return dataIndex === -1 ? 0 : dataIndex;\r\n}","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\Template.tsx",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useUser.ts",["309","310","311","312","313","314"],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\SidebarSubMenu.tsx",["315","316","317","318"],"import React, { useEffect, useState } from 'react'\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { Bold, JDicon, toast, JDtooltip, ReactTooltip } from '@janda-com/front';\r\nimport { IIcons } from '@janda-com/front/dist/components/icons/declation';\r\nimport { Paths } from '../../MainRouter';\r\nimport { AuthPaths } from '../../AuthRouter';\r\nimport classNames from \"classnames\";\r\n\r\nexport type TSidebarSub = {\r\n    icon: IIcons,\r\n    title: string,\r\n    path: string,\r\n    disabled: boolean,\r\n    redirect?: Paths | AuthPaths,\r\n    disabledTooltip?: string\r\n}\r\n\r\ninterface IProps {\r\n    menu: TSidebarSub,\r\n    onMenuClick: (path: string) => void;\r\n}\r\n\r\nconst SidebarSubMenu: React.FC<IProps> = ({ menu, onMenuClick }) => {\r\n    const history = useHistory()\r\n    const { pathname } = useLocation()\r\n    const { disabled, icon, path, redirect, title, disabledTooltip } = menu;\r\n\r\n    let selected: boolean = pathname === path\r\n\r\n    //url 서치로 들어온 경로 방지\r\n    if (selected && disabled && redirect) {\r\n        toast(disabledTooltip)\r\n        history.push(redirect);\r\n    }\r\n\r\n    const classes = classNames('subMenu__list', undefined, {\r\n        \"subMenu__list--activate\": selected,\r\n        \"subMenu__list--disabled\": disabled,\r\n    })\r\n\r\n    const handleClick = () => {\r\n        if (!disabled)\r\n            onMenuClick(path);\r\n    }\r\n\r\n    useEffect(() => {\r\n        ReactTooltip.rebuild();\r\n    })\r\n\r\n    return (\r\n        <li data-effect=\"solid\" data-place=\"top\" data-for=\"mainTooltip\" data-tip={disabled ? disabledTooltip : undefined} onClick={handleClick} className={classes} >\r\n            <JDicon mr=\"small\" icon={icon} />\r\n            <Bold size=\"small\">{title}</Bold>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default SidebarSubMenu\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\sidebar\\SidebarMainMenu.tsx",["319"],"import React from 'react';\r\nimport { JDicon, JDtypho } from '@janda-com/front';\r\nimport { IIcons } from '@janda-com/front/dist/components/icons/declation';\r\nimport { IMenu } from \"./Sidebar\";\r\n\r\nexport type IProps = {\r\n    menu: IMenu\r\n    index: number;\r\n    onMenuClick: (index: number) => void;\r\n    selected: boolean;\r\n}\r\n\r\nconst SidebarMainMenu: React.FC<IProps> = ({ menu, index, onMenuClick, selected }) => {\r\n    return (\r\n        <li onClick={() => { onMenuClick(index) }} className={`mainMenu__list ${selected && \"mainMenu__list--active\"}`} key={`sidebar_${index}`}>\r\n            <JDicon size=\"small\" icon={menu.icon} />\r\n            <JDtypho size=\"tiny\">{menu.title}</JDtypho>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default SidebarMainMenu\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\header\\Header.tsx",["320","321"],"import React from 'react'\r\nimport { JDalign, JDicon } from '@janda-com/front';\r\nimport { IIcons } from '@janda-com/front/dist/components/icons/declation';\r\nimport { TElements } from '@janda-com/front/dist/types/interface';\r\n\r\ninterface IProps {\r\n    onMenuClick: () => void;\r\n}\r\n\r\nconst Header: React.FC<IProps> = ({ children, onMenuClick }) => {\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <JDalign flex={{\r\n                vCenter: true,\r\n                between: true\r\n            }} className=\"header__items\">\r\n                <div>\r\n                    <JDicon size=\"small\" hover onClick={onMenuClick} color=\"white\" icon=\"menu\" />\r\n                </div>\r\n                <div>\r\n                    {children}\r\n                </div>\r\n            </JDalign>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\profile\\ProfileModal.tsx",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\utils\\hookGen.ts",["322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341"],"import { DocumentNode, LazyQueryResult, MutationHookOptions, QueryHookOptions, useMutation } from \"@apollo/client\";\r\nimport { useEffect } from \"react\";\r\nimport {useLazyQuery} from \"@apollo/client\";\r\nimport { ListInitOptions, useListQuery } from \"../hook/useListQuery\";\r\nimport { DEFAULT_PAGE_INFO } from \"@janda-com/front\";\r\nimport { FoffsetPagingInfo } from \"../type/api\";\r\n\r\nconst dataCheck = (data:any,operationName:string, checkProperty: string[] = [\"items\",\"pageInfo\"]) => {\r\n    if(data?.hasOwnProperty(operationName) === false) {\r\n        console.log(data)\r\n        throw Error(`result data object dose not have property ${operationName} look this above object ↑ `)\r\n    }\r\n\r\n    checkProperty.forEach(p => {\r\n        if(data?.[operationName].hasOwnProperty(p) === false) {\r\n            console.log(data[operationName])\r\n            throw Error(`result data object dose not have property ${p} look this above object ↑ `)\r\n        }\r\n    })\r\n}\r\n\r\ntype TDefaultSort = {\r\n    defaultSort:any[]\r\n}\r\n\r\nexport const generateListQueryHook = <F,S,Q,V,ResultFragment>(\r\n    QUERY: DocumentNode,\r\n    queryInit: Partial<ListInitOptions<F, S>> = {}\r\n    ) => {\r\n\r\n    const listQueryHook = (\r\n        {\r\n            initialPageIndex = 0,\r\n            initialSort = [],\r\n            initialFilter,\r\n            initialViewCount = 20,\r\n        }: Partial<ListInitOptions<F, S>> = {\r\n            ...queryInit\r\n        },\r\n        options: QueryHookOptions<Q, V> = {}\r\n    )=> {\r\n        const { variables: overrideVariables, ...ops } = options;\r\n        const { integratedVariable,...params } = useListQuery({\r\n            initialFilter,\r\n            initialPageIndex,\r\n            initialSort,\r\n            initialViewCount\r\n        })\r\n\r\n        const [getData, { data, loading: getLoading }] = useLazyQuery<Q,V>(QUERY,{\r\n            fetchPolicy: \"cache-and-network\",\r\n            // @ts-ignore\r\n            variables: {\r\n                ...integratedVariable,\r\n                ...overrideVariables\r\n            },\r\n            ...ops\r\n        })\r\n\r\n      \r\n        const operationName = getQueryName(QUERY);\r\n        // @ts-ignore\r\n        const items: ResultFragment[] = data?.[operationName]?.items || []\r\n        // @ts-ignore\r\n        const pageInfo: FoffsetPagingInfo = data?.[operationName]?.pageInfo || DEFAULT_PAGE_INFO\r\n\r\n        dataCheck(data,operationName)\r\n\r\n        useEffect(()=>{\r\n            getData()\r\n        },[\r\n            params.filter,\r\n            params.sort,\r\n            params.viewCount,\r\n            params.paginatorHook.page\r\n        ])\r\n\r\n        return { pageInfo,  getLoading, items, ...params }\r\n    }\r\n\r\n    return listQueryHook\r\n}\r\n\r\n// refetchQueries: [getOperationName(BOOKING_LIST) || \"\"],\r\n\r\nexport const generateMutationHook = <M,V>(MUTATION:DocumentNode,defaultOptions?: MutationHookOptions<M,V>) => {\r\n    const mutationHook = (options?: MutationHookOptions<M,V>) => {\r\n        const muHook = useMutation<M, V>(MUTATION, {\r\n            ...defaultOptions,\r\n            ...options\r\n        });\r\n        \r\n        return muHook\r\n    }\r\n    return mutationHook\r\n}\r\n\r\n\r\nexport const useGenerateFindQuery = <Q,V,ResultFragment>(findBy: keyof V,QUERY:DocumentNode) => {\r\n    const usefindQueryHook = (key:any, options:QueryHookOptions<Q, V> = {}) => {\r\n        const [getData, { data, loading }] = useLazyQuery<Q, V>(QUERY, {\r\n            skip: !key,\r\n            nextFetchPolicy: \"network-only\",\r\n            // @ts-ignore\r\n            variables: {\r\n                [findBy]: key\r\n            },\r\n            ...options,\r\n        })\r\n        \r\n        const operationName = getQueryName(QUERY);\r\n        // @ts-ignore\r\n        if(data?.[operationName] && !data[operationName].hasOwnProperty(\"data\")){\r\n            throw Error(\"data is not exist on response\")\r\n        }\r\n        // @ts-ignore\r\n        const item:ResultFragment | undefined = data?.[operationName].data || undefined;\r\n        \r\n        useEffect(()=>{\r\n            getData()\r\n        },[key])\r\n\r\n        return {item,loading}\r\n    }\r\n\r\n    return usefindQueryHook\r\n}\r\n\r\nexport const capitalize = (s:string) => {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1)\r\n  }\r\n\r\n\r\nexport const getQueryName = (QUERY:DocumentNode) => {\r\n    const operation = QUERY.definitions[0];\r\n    // @ts-ignore\r\n    const operationName = operation && operation.name.value;\r\n\r\n    return capitalize(operationName);\r\n}","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\utils\\query.ts",["342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362"],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\user.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\utils\\onCompletedMessage.ts",["363","364","365"],"import React from \"react\";\r\nimport { toast } from \"@janda-com/front\";\r\n\r\ntype TError = {\r\n    [key:string]:any;\r\n    code: string | null;\r\n    message: string;\r\n    details: string[] | null;\r\n}\r\n\r\ntype TResult = {\r\n    [key:string]:any;\r\n    ok: boolean;\r\n    error: TError | null;\r\n}\r\n\r\nconst ErrorMsg = \"이런 문제가 발생 했습니다.\"\r\n  \r\nexport const completeMsg = (\r\n    result: TResult,\r\n    resultOK?: string,\r\n    resultFale?: string | undefined,\r\n    queryName?: string\r\n  ):boolean => {\r\n    if (!result) return false;\r\n    \r\n    if (result.ok && resultOK) {\r\n      toast.success(resultOK, {\r\n        className: `${queryName}-ok`\r\n      });\r\n      // 한글이 있다면 에러 메세지는 백엔드에서 온것\r\n    }\r\n    \r\n    if (result.error) {\r\n        const {code, details, message} = result.error;\r\n        console.error(\"On Completed Error Msg From BackEnd\");\r\n        console.error(message);\r\n        console.error(code);\r\n        console.error(details);\r\n\r\n        toast.warn(resultFale || ErrorMsg, {\r\n            toastId: `${queryName}-error`\r\n        });\r\n    }\r\n    \r\n    return result.ok\r\n  };\r\n  ","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useListQuery.ts",["366"],"import { ISet } from \"@janda-com/front/dist/types/interface\";\r\nimport { useState } from \"react\";\r\nimport { IUseQueryFilter, useQueryFilter } from \"./useQueryFilter\";\r\nimport { IUseQuerySort, useQuerySort } from \"./useQuerySort\";\r\n\r\nexport interface ListInitOptions<F, S> {\r\n    initialPageIndex: number,\r\n    initialViewCount: number\r\n    initialFilter: F,\r\n    initialSort: S[]\r\n}\r\n\r\nexport interface IListHook<F, S> extends IUseQueryFilter<F>, IUseQuerySort<S> {\r\n    setViewCount: ISet<number>;\r\n    sort: S[];\r\n    setPage: ISet<number>;\r\n    viewCount: number;\r\n    page: number\r\n}\r\n\r\nexport function useListQuery<F, S>({ initialFilter, initialPageIndex, initialSort, initialViewCount }: ListInitOptions<F, S>) {\r\n    const { filter, ...useFilters } = useQueryFilter<F>(initialFilter || {} as F);\r\n    const { sort, ...useSort } = useQuerySort<S>(initialSort);\r\n    const [viewCount, setViewCount] = useState(initialViewCount);\r\n    const [page, setPage] = useState(initialPageIndex);\r\n\r\n    const integratedVariable = {\r\n        pageInput: {\r\n            page: page,\r\n            cntPerPage: viewCount\r\n        },\r\n        filter,\r\n        sort,\r\n    }\r\n\r\n    return { filter, page, setPage, integratedVariable, sort, viewCount, setViewCount, ...useFilters, ...useSort }\r\n}","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\fragments.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\History.tsx",["367"],"import { JDcontainer, useModal } from '@janda-com/front';\r\nimport React from 'react';\r\nimport JDSMS from \"@janda-com/sms\";\r\ninterface IProp {\r\n    Core: JDSMS\r\n}\r\n\r\nexport const History: React.FC<IProp> = ({ Core }) => {\r\n    const { ChargeModalWrap, History } = Core;\r\n    const chargeModalHook = useModal();\r\n    const handleClickCharge = (amt: number) => {\r\n        //   TODO charge Mu\r\n        // chargeMu({\r\n        //   variables: {\r\n        //     amount: toNumber(amt),\r\n        //   },\r\n        // });\r\n    }\r\n\r\n    return <JDcontainer>\r\n        <ChargeModalWrap\r\n            onClickCharge={handleClickCharge}\r\n            modalHook={chargeModalHook}\r\n        />\r\n        <History />\r\n    </JDcontainer>;\r\n};\r\n\r\nexport default History;\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\Init.tsx",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\page\\sms\\page\\Sender.tsx",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\type\\api.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useVerification.ts",["368","369"],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\verfi\\PhoneVerificationModal.tsx",["370","371"],"import { TimePerMs, InputText, IUseModal, JDbutton, JDmodal, JDmodalConfigProps } from \"@janda-com/front\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Timer from \"react-compound-timer/build\";\r\nimport { toast } from 'react-toastify';\r\nimport JDTimer from \"../../atom/Timer\";\r\nimport { TuseVerification } from \"../../hook/useVerification\";\r\n\r\nlet RE_SEND_COUNT = 10;\r\n\r\n\r\ninterface IProps extends JDmodalConfigProps, TuseVerification {\r\n  modalHook: IUseModal;\r\n  payload: string;\r\n}\r\n\r\n// 1. 상위에서 먼저 인증을 시작시키세요.\r\nconst PhoneVerificationModal: React.FC<IProps> = ({\r\n  modalHook,\r\n  payload,\r\n  code,\r\n  setCode,\r\n  totalLoading,\r\n  verifiComplete,\r\n  verifiStart,\r\n}) => {\r\n  const [isTimeOver, setTimeOver] = useState(false);\r\n\r\n\r\n  const handleResend = () => {\r\n    if (totalLoading) return;\r\n    if (!RE_SEND_COUNT) {\r\n      toast.error(\"더이상 인증 문자를 발송할 수 없습니다.\")\r\n      return;\r\n    }\r\n    verifiStart(payload)\r\n    RE_SEND_COUNT = RE_SEND_COUNT - 1;\r\n  }\r\n\r\n  const handleComplete = async () => {\r\n    if (totalLoading) return;\r\n    if (isTimeOver)\r\n      toast.warn(\"시간이 초과하였습니다. 다시 인증요청을 해주세요.\");\r\n\r\n    await verifiComplete().then((data) => {\r\n      if (data?.ok) {\r\n        modalHook.closeModal();\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (modalHook.isOpen)\r\n      verifiStart(payload)\r\n  }, [modalHook.isOpen])\r\n\r\n  return (\r\n    <JDmodal\r\n      {...modalHook}\r\n      head={{\r\n        title: \"핸드폰 인증하기\",\r\n      }}\r\n      foot={\r\n        <div>\r\n          <JDbutton\r\n            id=\"verfiCompleteBtn\"\r\n            mode=\"flat\"\r\n            thema={\"primary\"}\r\n            label={\"인증완료\"}\r\n            onClick={handleComplete}\r\n          />\r\n          <JDbutton\r\n            mode=\"flat\"\r\n            thema=\"grey2\"\r\n            disabled={RE_SEND_COUNT === 0}\r\n            label={\"인증번호 재발송\"}\r\n            onClick={handleResend}\r\n          />\r\n        </div>\r\n      }\r\n      loading={totalLoading}\r\n      className=\"Modal\"\r\n      overlayClassName=\"Overlay\"\r\n      ariaHideApp={false}\r\n    >\r\n      <JDTimer initialTime={TimePerMs.M * 3} direction=\"backward\">\r\n        {({ timerState }: any) => {\r\n          if (timerState === \"STOPPED\") {\r\n            setTimeOver(true);\r\n          }\r\n          return (\r\n            <span className=\"JDtimer\">\r\n              <span className=\"JDtimer__minute\">\r\n                <Timer.Minutes />\r\n                분\r\n              </span>\r\n              <span className=\"JDtimer__second\">\r\n                <Timer.Seconds />\r\n                초\r\n              </span>\r\n            </span>\r\n          );\r\n        }}\r\n      </JDTimer>\r\n      <InputText\r\n        placeholder={\"******\"}\r\n        id=\"verifiKeyInput\"\r\n        value={code}\r\n        onChange={setCode as any}\r\n        label={\"인증하기\"}\r\n      />\r\n    </JDmodal>\r\n  );\r\n};\r\n\r\nexport default PhoneVerificationModal;\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\passwordChecker\\PasswordCheck.tsx",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useQuerySort.ts",["372","373"],"import { ISet } from \"@janda-com/front/dist/types/interface\";\r\nimport { useState } from \"react\";\r\n\r\nexport interface IUseQuerySort<S> {\r\n    sort: S[];\r\n    setSort: ISet<S[]>;\r\n    isActive: (check: S) => boolean\r\n    removeSort: (st: S) => void\r\n    addSort: (st: S) => void\r\n    switchSort: (change: S) => void\r\n}\r\n\r\nexport const useQuerySort = <S>(defaultSort:S[]):IUseQuerySort<S> => {\r\n    const [sort,setSort] = useState(defaultSort);\r\n\r\n    const isActive = (check:S):boolean => sort.includes(check);\r\n    \r\n    //같은 이름을 가진 sort를 제거하고 자신이 들어감\r\n    const switchSort = (change:S) => {\r\n        const _change = (change as any).split(\"_\")[0];\r\n        const removed = sort.filter(s => (s as any).includes(_change));\r\n        setSort([...removed, change]);\r\n   }\r\n\r\n   const removeSort = (st:S) => {\r\n       const filtered = sort.filter(_st => _st !== st);\r\n       setSort([...filtered]);\r\n   }\r\n\r\n   const addSort = (st:S) => {\r\n        const filtered = sort.filter(_st => _st !== st);\r\n        setSort([...filtered,st]);\r\n   }\r\n\r\n   //솔트를 \r\n    return { sort, setSort, isActive, addSort, removeSort, switchSort}\r\n}\r\n\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\hook\\useQueryFilter.ts",["374","375","376","377","378","379","380"],"import { ISet } from \"@janda-com/front/dist/types/interface\";\r\nimport dayjs from \"dayjs\";\r\nimport { useState } from \"react\";\r\n\r\nexport type TRange = {\r\n    from?: Date | undefined;\r\n    to?: Date | undefined;\r\n}\r\n\r\n\r\nexport interface IUseQueryFilter<F> {\r\n    filter: F;\r\n    setFilter: ISet<F>;\r\n    setORfilter: (keys: (keyof F)[], value: string) => void;\r\n    setUniqFilter: <T extends keyof F>(target: T, uniq: (keyof F)[], value: any) => void;\r\n    filterToRange: (key: keyof F) => TRange\r\n    setRangeFilter: (date: TRange, key: string) => {\r\n        [x: string]: Date | undefined;\r\n    }\r\n}\r\n\r\nexport const useQueryFilter = <F>(defaultFilter:F):IUseQueryFilter<F> => {\r\n    const [filter,setFilter] = useState(defaultFilter);\r\n\r\n    //특정 필터키를 range 로 전환\r\n    const filterToRange = (key:keyof F):TRange => {\r\n        if(!(key as string).includes(\"_\")) {\r\n            throw Error(\"invliade key of filter To Range\")\r\n        }\r\n\r\n        const _key = (key as string).split(\"_\")[0]\r\n\r\n        const range = {\r\n            // @ts-ignore\r\n            from: filter[_key + \"_gte\"] ? dayjs((filter as any).startDate_gte).toDate() : undefined,\r\n            // @ts-ignore\r\n            to: filter[_key + \"_lte\"] ? dayjs((filter as any).startDate_lte).toDate() : undefined\r\n        }\r\n\r\n        return range;\r\n    }\r\n\r\n    //반은 인자들로 Or \r\n    const setORfilter = (keys: (keyof F)[],value: string) => {\r\n        const OR = keys.map(key => ({\r\n            [key]: (key as string).includes(\"_in\") ? [value] : value\r\n        }))\r\n\r\n        setFilter({\r\n            ...filter,\r\n            OR\r\n        })\r\n    }\r\n\r\n\r\n    //Date range를 받아서 범위전환\r\n    const setRangeFilter = (date:TRange,key:string) => {\r\n        if(!(key as string).includes(\"_\")) {\r\n            throw Error(\"invliade key of filter To Range\")\r\n        }\r\n        \r\n        const _key = key.split(\"_\")[0]\r\n\r\n        const filter = {\r\n            [`${_key}_gte`]: date.from ? dayjs(date.from).toDate() : undefined ,\r\n            [`${_key}_lte`]: date.to ? dayjs(date.to).toDate() : undefined\r\n        }\r\n\r\n        return filter;\r\n    }\r\n\r\n    //uniq목록을 사용하여 uniq한 필터를 set함.\r\n    const setUniqFilter = <T extends keyof F>(target: T, uniq: (keyof F)[], value:F[T]) => {\r\n        const _value = value ? value : undefined;\r\n        const _filter = {\r\n            ...filter\r\n        }\r\n        uniq.forEach(u => {\r\n            _filter[u] = undefined as any;\r\n        })\r\n        uniq.forEach(u => {\r\n            if(target === u) {\r\n                _filter[u] = _value as any;\r\n            }\r\n        })\r\n\r\n        setFilter({\r\n            ..._filter\r\n        })\r\n    }\r\n\r\n    return {filter,setFilter,setUniqFilter,filterToRange,setRangeFilter,setORfilter}\r\n}\r\n\r\n","C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\purchase.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\invoice.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\notification.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\payment.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\zoneInfo.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\item.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\user.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\store.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\verification.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\apollo\\gql\\fragment\\product.ts",[],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\component\\passwordChecker\\SecurityLevelViewer.tsx",["381","382","383","384","385","386","387","388","389","390","391"],"C:\\Users\\minjae\\Desktop\\projects\\janda\\booking-light\\src\\atom\\Timer.tsx",["392","393","394","395","396","397","398"],"import React from \"react\";\r\nimport Timer from \"react-compound-timer\";\r\n\r\nexport type TimerStateType = \"INITED\" | \"PLAYING\" | \"PAUSED\" | \"STOPPED\";\r\n\r\ninterface TimerProps {\r\n    /** Timer count direction */\r\n    direction?: \"forward\" | \"backward\";\r\n    /** Inittial time on timer */\r\n    initialTime?: number;\r\n    /** Time to rerender */\r\n    timeToUpdate?: number;\r\n    /** Start timer immediately after render */\r\n    startImmediately?: boolean;\r\n    /** Function to format all values */\r\n    formatValue?: (value: number) => string;\r\n    /** Function that will be called on timer start */\r\n    onStart?: () => any;\r\n    /** Function that will be called on timer resume */\r\n    onResume?: () => any;\r\n    /** Function that will be called on timer pause */\r\n    onPause?: () => any;\r\n    /** Function that will be called on timer stop */\r\n    onStop?: () => any;\r\n    /** Function that will be called on timer reset */\r\n    onReset?: () => any;\r\n    /** Last unit will accumulate time, for example, 26 hours or 90 seconds */\r\n    lastUnit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\";\r\n    /** Time checkpoints with callback functions */\r\n    checkpoints?: Array<{\r\n        time: number;\r\n        callback: () => any;\r\n    }>;\r\n}\r\n\r\ninterface IProps extends TimerProps { }\r\n\r\nconst JDTimer: React.FC<IProps> = props => <Timer {...props} />;\r\n\r\nexport default JDTimer;\r\n",{"ruleId":"399","severity":2,"message":"400","line":5,"column":1,"nodeType":"401","messageId":"402","endLine":5,"endColumn":14},{"ruleId":"403","severity":1,"message":"404","line":28,"column":8,"nodeType":"405","messageId":"406","endLine":28,"endColumn":42},{"ruleId":"403","severity":1,"message":"404","line":139,"column":8,"nodeType":"405","messageId":"406","endLine":139,"endColumn":29},{"ruleId":"407","severity":1,"message":"408","line":3,"column":23,"nodeType":"409","messageId":"410","endLine":3,"endColumn":25},{"ruleId":"407","severity":1,"message":"411","line":4,"column":10,"nodeType":"409","messageId":"410","endLine":4,"endColumn":25},{"ruleId":"407","severity":1,"message":"412","line":7,"column":10,"nodeType":"409","messageId":"410","endLine":7,"endColumn":19},{"ruleId":"407","severity":1,"message":"413","line":8,"column":8,"nodeType":"409","messageId":"410","endLine":8,"endColumn":18},{"ruleId":"414","severity":2,"message":"415","line":10,"column":11,"nodeType":"409","messageId":"416","endLine":10,"endColumn":16},{"ruleId":"417","severity":2,"message":"418","line":14,"column":87,"nodeType":"419","messageId":"420","endLine":14,"endColumn":90},{"ruleId":"407","severity":1,"message":"421","line":1,"column":17,"nodeType":"409","messageId":"410","endLine":1,"endColumn":27},{"ruleId":"407","severity":1,"message":"422","line":1,"column":40,"nodeType":"409","messageId":"410","endLine":1,"endColumn":48},{"ruleId":"407","severity":1,"message":"423","line":6,"column":10,"nodeType":"409","messageId":"410","endLine":6,"endColumn":16},{"ruleId":"407","severity":1,"message":"424","line":7,"column":10,"nodeType":"409","messageId":"410","endLine":7,"endColumn":21},{"ruleId":"407","severity":1,"message":"425","line":7,"column":23,"nodeType":"409","messageId":"410","endLine":7,"endColumn":32},{"ruleId":"407","severity":1,"message":"426","line":8,"column":10,"nodeType":"409","messageId":"410","endLine":8,"endColumn":18},{"ruleId":"407","severity":1,"message":"427","line":10,"column":10,"nodeType":"409","messageId":"410","endLine":10,"endColumn":12},{"ruleId":"407","severity":1,"message":"428","line":12,"column":8,"nodeType":"409","messageId":"410","endLine":12,"endColumn":18},{"ruleId":"407","severity":1,"message":"413","line":13,"column":8,"nodeType":"409","messageId":"410","endLine":13,"endColumn":18},{"ruleId":"407","severity":1,"message":"411","line":15,"column":10,"nodeType":"409","messageId":"410","endLine":15,"endColumn":25},{"ruleId":"407","severity":1,"message":"429","line":25,"column":48,"nodeType":"409","messageId":"410","endLine":25,"endColumn":59},{"ruleId":"403","severity":1,"message":"404","line":30,"column":30,"nodeType":"419","messageId":"406","endLine":30,"endColumn":93},{"ruleId":"430","severity":2,"message":"431","line":8,"column":9,"nodeType":"409","messageId":"432","endLine":8,"endColumn":39,"fix":"433"},{"ruleId":"430","severity":2,"message":"434","line":9,"column":9,"nodeType":"409","messageId":"432","endLine":9,"endColumn":39,"fix":"435"},{"ruleId":"430","severity":2,"message":"436","line":10,"column":9,"nodeType":"409","messageId":"432","endLine":10,"endColumn":45,"fix":"437"},{"ruleId":"403","severity":1,"message":"404","line":14,"column":20,"nodeType":"419","messageId":"406","endLine":14,"endColumn":25},{"ruleId":"438","severity":2,"message":"439","line":15,"column":11,"nodeType":"440","messageId":"420","endLine":15,"endColumn":14},{"ruleId":"417","severity":2,"message":"441","line":17,"column":21,"nodeType":"419","messageId":"420","endLine":19,"endColumn":6},{"ruleId":"407","severity":1,"message":"442","line":14,"column":7,"nodeType":"409","messageId":"410","endLine":14,"endColumn":27},{"ruleId":"403","severity":1,"message":"404","line":33,"column":20,"nodeType":"419","messageId":"406","endLine":33,"endColumn":25},{"ruleId":"414","severity":2,"message":"415","line":8,"column":11,"nodeType":"409","messageId":"416","endLine":8,"endColumn":16},{"ruleId":"407","severity":1,"message":"443","line":11,"column":13,"nodeType":"409","messageId":"410","endLine":11,"endColumn":17},{"ruleId":"407","severity":1,"message":"444","line":13,"column":11,"nodeType":"409","messageId":"410","endLine":13,"endColumn":18},{"ruleId":"407","severity":1,"message":"422","line":6,"column":17,"nodeType":"409","messageId":"410","endLine":6,"endColumn":25},{"ruleId":"407","severity":1,"message":"445","line":7,"column":10,"nodeType":"409","messageId":"410","endLine":7,"endColumn":15},{"ruleId":"414","severity":2,"message":"415","line":22,"column":18,"nodeType":"409","messageId":"416","endLine":22,"endColumn":24},{"ruleId":"438","severity":2,"message":"439","line":24,"column":37,"nodeType":"440","messageId":"420","endLine":25,"endColumn":2},{"ruleId":"407","severity":1,"message":"446","line":37,"column":11,"nodeType":"409","messageId":"410","endLine":37,"endColumn":28},{"ruleId":"447","severity":2,"message":"448","line":76,"column":25,"nodeType":"449","messageId":"420","endLine":78,"endColumn":10},{"ruleId":"417","severity":2,"message":"441","line":81,"column":40,"nodeType":"419","messageId":"420","endLine":83,"endColumn":6},{"ruleId":"407","severity":1,"message":"450","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":21},{"ruleId":"407","severity":1,"message":"451","line":2,"column":10,"nodeType":"409","messageId":"410","endLine":2,"endColumn":26},{"ruleId":"407","severity":1,"message":"452","line":7,"column":10,"nodeType":"409","messageId":"410","endLine":7,"endColumn":17},{"ruleId":"407","severity":1,"message":"427","line":8,"column":10,"nodeType":"409","messageId":"410","endLine":8,"endColumn":12},{"ruleId":"407","severity":1,"message":"453","line":10,"column":8,"nodeType":"409","messageId":"410","endLine":10,"endColumn":30},{"ruleId":"407","severity":1,"message":"454","line":13,"column":10,"nodeType":"409","messageId":"410","endLine":13,"endColumn":15},{"ruleId":"407","severity":1,"message":"455","line":14,"column":10,"nodeType":"409","messageId":"410","endLine":14,"endColumn":16},{"ruleId":"407","severity":1,"message":"456","line":14,"column":18,"nodeType":"409","messageId":"410","endLine":14,"endColumn":33},{"ruleId":"407","severity":1,"message":"457","line":14,"column":35,"nodeType":"409","messageId":"410","endLine":14,"endColumn":55},{"ruleId":"407","severity":1,"message":"458","line":14,"column":57,"nodeType":"409","messageId":"410","endLine":14,"endColumn":86},{"ruleId":"407","severity":1,"message":"459","line":14,"column":88,"nodeType":"409","messageId":"410","endLine":14,"endColumn":105},{"ruleId":"407","severity":1,"message":"460","line":14,"column":107,"nodeType":"409","messageId":"410","endLine":14,"endColumn":124},{"ruleId":"407","severity":1,"message":"461","line":14,"column":126,"nodeType":"409","messageId":"410","endLine":14,"endColumn":152},{"ruleId":"407","severity":1,"message":"462","line":14,"column":154,"nodeType":"409","messageId":"410","endLine":14,"endColumn":172},{"ruleId":"407","severity":1,"message":"463","line":15,"column":10,"nodeType":"409","messageId":"410","endLine":15,"endColumn":30},{"ruleId":"407","severity":1,"message":"464","line":16,"column":10,"nodeType":"409","messageId":"410","endLine":16,"endColumn":21},{"ruleId":"403","severity":1,"message":"404","line":18,"column":28,"nodeType":"419","messageId":"406","endLine":18,"endColumn":33},{"ruleId":"403","severity":1,"message":"404","line":25,"column":19,"nodeType":"419","messageId":"406","endLine":25,"endColumn":24},{"ruleId":"407","severity":1,"message":"443","line":26,"column":13,"nodeType":"409","messageId":"410","endLine":26,"endColumn":17},{"ruleId":"407","severity":1,"message":"465","line":27,"column":11,"nodeType":"409","messageId":"410","endLine":27,"endColumn":22},{"ruleId":"407","severity":1,"message":"466","line":29,"column":11,"nodeType":"409","messageId":"410","endLine":29,"endColumn":26},{"ruleId":"407","severity":1,"message":"467","line":33,"column":11,"nodeType":"409","messageId":"410","endLine":33,"endColumn":19},{"ruleId":"407","severity":1,"message":"468","line":73,"column":34,"nodeType":"409","messageId":"410","endLine":73,"endColumn":39},{"ruleId":"417","severity":2,"message":"441","line":73,"column":44,"nodeType":"419","messageId":"420","endLine":73,"endColumn":47},{"ruleId":"407","severity":1,"message":"468","line":74,"column":32,"nodeType":"409","messageId":"410","endLine":74,"endColumn":37},{"ruleId":"417","severity":2,"message":"441","line":74,"column":42,"nodeType":"419","messageId":"420","endLine":74,"endColumn":45},{"ruleId":"407","severity":1,"message":"469","line":21,"column":46,"nodeType":"409","messageId":"410","endLine":21,"endColumn":52},{"ruleId":"407","severity":1,"message":"450","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":21},{"ruleId":"407","severity":1,"message":"470","line":3,"column":101,"nodeType":"409","messageId":"410","endLine":3,"endColumn":105},{"ruleId":"407","severity":1,"message":"471","line":3,"column":127,"nodeType":"409","messageId":"410","endLine":3,"endColumn":145},{"ruleId":"407","severity":1,"message":"472","line":3,"column":147,"nodeType":"409","messageId":"410","endLine":3,"endColumn":159},{"ruleId":"407","severity":1,"message":"464","line":8,"column":10,"nodeType":"409","messageId":"410","endLine":8,"endColumn":21},{"ruleId":"407","severity":1,"message":"473","line":1,"column":29,"nodeType":"409","messageId":"410","endLine":1,"endColumn":38},{"ruleId":"474","severity":2,"message":"475","line":24,"column":11,"nodeType":"476","messageId":"477","endLine":24,"endColumn":36,"fix":"478"},{"ruleId":"474","severity":2,"message":"475","line":25,"column":11,"nodeType":"476","messageId":"477","endLine":25,"endColumn":53,"fix":"479"},{"ruleId":"474","severity":2,"message":"475","line":29,"column":11,"nodeType":"476","messageId":"477","endLine":29,"endColumn":46,"fix":"480"},{"ruleId":"430","severity":2,"message":"481","line":203,"column":9,"nodeType":"409","messageId":"432","endLine":203,"endColumn":16,"fix":"482"},{"ruleId":"403","severity":1,"message":"404","line":3,"column":28,"nodeType":"419","messageId":"406","endLine":3,"endColumn":61},{"ruleId":"407","severity":1,"message":"483","line":5,"column":225,"nodeType":"409","messageId":"410","endLine":5,"endColumn":237},{"ruleId":"407","severity":1,"message":"484","line":5,"column":239,"nodeType":"409","messageId":"410","endLine":5,"endColumn":249},{"ruleId":"407","severity":1,"message":"485","line":5,"column":251,"nodeType":"409","messageId":"410","endLine":5,"endColumn":265},{"ruleId":"407","severity":1,"message":"486","line":5,"column":267,"nodeType":"409","messageId":"410","endLine":5,"endColumn":279},{"ruleId":"407","severity":1,"message":"487","line":5,"column":468,"nodeType":"409","messageId":"410","endLine":5,"endColumn":511},{"ruleId":"403","severity":1,"message":"404","line":19,"column":27,"nodeType":"419","messageId":"406","endLine":19,"endColumn":69},{"ruleId":"407","severity":1,"message":"422","line":1,"column":28,"nodeType":"409","messageId":"410","endLine":1,"endColumn":36},{"ruleId":"407","severity":1,"message":"488","line":2,"column":10,"nodeType":"409","messageId":"410","endLine":2,"endColumn":14},{"ruleId":"407","severity":1,"message":"425","line":3,"column":31,"nodeType":"409","messageId":"410","endLine":3,"endColumn":40},{"ruleId":"430","severity":2,"message":"489","line":28,"column":9,"nodeType":"409","messageId":"432","endLine":28,"endColumn":26,"fix":"490"},{"ruleId":"407","severity":1,"message":"423","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":16},{"ruleId":"407","severity":1,"message":"423","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":16},{"ruleId":"407","severity":1,"message":"491","line":4,"column":10,"nodeType":"409","messageId":"410","endLine":4,"endColumn":19},{"ruleId":"407","severity":1,"message":"492","line":1,"column":24,"nodeType":"409","messageId":"410","endLine":1,"endColumn":39},{"ruleId":"493","severity":1,"message":"494","line":8,"column":25,"nodeType":"495","messageId":"496","endLine":8,"endColumn":28,"suggestions":"497"},{"ruleId":"498","severity":2,"message":"499","line":9,"column":14,"nodeType":"500","messageId":"501","endLine":9,"endColumn":28},{"ruleId":"498","severity":2,"message":"499","line":15,"column":34,"nodeType":"500","messageId":"501","endLine":15,"endColumn":48},{"ruleId":"407","severity":1,"message":"502","line":22,"column":6,"nodeType":"409","messageId":"410","endLine":22,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":23,"column":17,"nodeType":"495","messageId":"496","endLine":23,"endColumn":20,"suggestions":"503"},{"ruleId":"403","severity":1,"message":"404","line":26,"column":38,"nodeType":"419","messageId":"406","endLine":29,"endColumn":9},{"ruleId":"399","severity":2,"message":"400","line":52,"column":13,"nodeType":"401","messageId":"402","endLine":52,"endColumn":26},{"ruleId":"399","severity":2,"message":"400","line":62,"column":9,"nodeType":"401","messageId":"402","endLine":62,"endColumn":22},{"ruleId":"399","severity":2,"message":"400","line":64,"column":9,"nodeType":"401","messageId":"402","endLine":64,"endColumn":22},{"ruleId":"403","severity":1,"message":"404","line":86,"column":37,"nodeType":"419","messageId":"406","endLine":86,"endColumn":110},{"ruleId":"403","severity":1,"message":"404","line":99,"column":37,"nodeType":"419","messageId":"406","endLine":99,"endColumn":96},{"ruleId":"493","severity":1,"message":"494","line":100,"column":35,"nodeType":"495","messageId":"496","endLine":100,"endColumn":38,"suggestions":"504"},{"ruleId":"399","severity":2,"message":"400","line":104,"column":13,"nodeType":"401","messageId":"402","endLine":104,"endColumn":26},{"ruleId":"399","severity":2,"message":"400","line":112,"column":9,"nodeType":"401","messageId":"402","endLine":112,"endColumn":22},{"ruleId":"498","severity":2,"message":"499","line":113,"column":58,"nodeType":"500","messageId":"501","endLine":113,"endColumn":72},{"ruleId":"399","severity":2,"message":"400","line":116,"column":9,"nodeType":"401","messageId":"402","endLine":116,"endColumn":22},{"ruleId":"403","severity":1,"message":"404","line":129,"column":27,"nodeType":"419","messageId":"406","endLine":129,"endColumn":40},{"ruleId":"403","severity":1,"message":"404","line":135,"column":29,"nodeType":"419","messageId":"406","endLine":135,"endColumn":52},{"ruleId":"399","severity":2,"message":"400","line":137,"column":5,"nodeType":"401","messageId":"402","endLine":137,"endColumn":18},{"ruleId":"407","severity":1,"message":"505","line":1,"column":45,"nodeType":"409","messageId":"410","endLine":1,"endColumn":58},{"ruleId":"506","severity":2,"message":"507","line":13,"column":2,"nodeType":"508","messageId":"420","endLine":13,"endColumn":3,"fix":"509"},{"ruleId":"493","severity":1,"message":"494","line":15,"column":25,"nodeType":"495","messageId":"496","endLine":15,"endColumn":28,"suggestions":"510"},{"ruleId":"498","severity":2,"message":"499","line":17,"column":14,"nodeType":"500","messageId":"501","endLine":17,"endColumn":28},{"ruleId":"498","severity":2,"message":"499","line":22,"column":34,"nodeType":"500","messageId":"501","endLine":22,"endColumn":48},{"ruleId":"403","severity":1,"message":"404","line":35,"column":38,"nodeType":"419","messageId":"406","endLine":39,"endColumn":5},{"ruleId":"399","severity":2,"message":"400","line":59,"column":13,"nodeType":"401","messageId":"402","endLine":59,"endColumn":26},{"ruleId":"399","severity":2,"message":"400","line":71,"column":9,"nodeType":"401","messageId":"402","endLine":71,"endColumn":22},{"ruleId":"493","severity":1,"message":"494","line":73,"column":54,"nodeType":"495","messageId":"496","endLine":73,"endColumn":57,"suggestions":"511"},{"ruleId":"403","severity":1,"message":"404","line":91,"column":34,"nodeType":"419","messageId":"406","endLine":94,"endColumn":5},{"ruleId":"407","severity":1,"message":"512","line":97,"column":38,"nodeType":"409","messageId":"410","endLine":97,"endColumn":43},{"ruleId":"493","severity":1,"message":"494","line":107,"column":39,"nodeType":"495","messageId":"496","endLine":107,"endColumn":42,"suggestions":"513"},{"ruleId":"399","severity":2,"message":"400","line":108,"column":9,"nodeType":"401","messageId":"402","endLine":108,"endColumn":22},{"ruleId":"403","severity":1,"message":"404","line":127,"column":37,"nodeType":"419","messageId":"406","endLine":127,"endColumn":110},{"ruleId":"403","severity":1,"message":"404","line":140,"column":34,"nodeType":"419","messageId":"406","endLine":140,"endColumn":94},{"ruleId":"493","severity":1,"message":"494","line":141,"column":33,"nodeType":"495","messageId":"496","endLine":141,"endColumn":36,"suggestions":"514"},{"ruleId":"399","severity":2,"message":"400","line":145,"column":13,"nodeType":"401","messageId":"402","endLine":145,"endColumn":26},{"ruleId":"399","severity":2,"message":"400","line":154,"column":9,"nodeType":"401","messageId":"402","endLine":154,"endColumn":22},{"ruleId":"399","severity":2,"message":"400","line":156,"column":9,"nodeType":"401","messageId":"402","endLine":156,"endColumn":22},{"ruleId":"403","severity":1,"message":"404","line":174,"column":29,"nodeType":"419","messageId":"406","endLine":174,"endColumn":52},{"ruleId":"399","severity":2,"message":"400","line":177,"column":5,"nodeType":"401","messageId":"402","endLine":177,"endColumn":18},{"ruleId":"407","severity":1,"message":"515","line":1,"column":8,"nodeType":"409","messageId":"410","endLine":1,"endColumn":13},{"ruleId":"493","severity":1,"message":"494","line":5,"column":18,"nodeType":"495","messageId":"496","endLine":5,"endColumn":21,"suggestions":"516"},{"ruleId":"493","severity":1,"message":"494","line":12,"column":18,"nodeType":"495","messageId":"496","endLine":12,"endColumn":21,"suggestions":"517"},{"ruleId":"403","severity":1,"message":"404","line":21,"column":8,"nodeType":"405","messageId":"406","endLine":21,"endColumn":126},{"ruleId":"407","severity":1,"message":"518","line":11,"column":32,"nodeType":"409","messageId":"410","endLine":11,"endColumn":43},{"ruleId":"407","severity":1,"message":"519","line":3,"column":149,"nodeType":"409","messageId":"410","endLine":3,"endColumn":171},{"ruleId":"403","severity":1,"message":"404","line":12,"column":32,"nodeType":"419","messageId":"406","endLine":12,"endColumn":87},{"ruleId":"493","severity":1,"message":"494","line":86,"column":27,"nodeType":"495","messageId":"496","endLine":86,"endColumn":30,"suggestions":"520"},{"ruleId":"493","severity":1,"message":"494","line":108,"column":30,"nodeType":"495","messageId":"496","endLine":108,"endColumn":33,"suggestions":"521"},{"ruleId":"493","severity":1,"message":"494","line":20,"column":36,"nodeType":"495","messageId":"496","endLine":20,"endColumn":39,"suggestions":"522"},{"ruleId":"493","severity":1,"message":"494","line":21,"column":48,"nodeType":"495","messageId":"496","endLine":21,"endColumn":51,"suggestions":"523"},{"ruleId":"493","severity":1,"message":"494","line":15,"column":77,"nodeType":"495","messageId":"496","endLine":15,"endColumn":80,"suggestions":"524"},{"ruleId":"399","severity":2,"message":"400","line":34,"column":13,"nodeType":"401","messageId":"402","endLine":34,"endColumn":26},{"ruleId":"493","severity":1,"message":"494","line":35,"column":60,"nodeType":"495","messageId":"496","endLine":35,"endColumn":63,"suggestions":"525"},{"ruleId":"399","severity":2,"message":"400","line":36,"column":13,"nodeType":"401","messageId":"402","endLine":36,"endColumn":26},{"ruleId":"493","severity":1,"message":"494","line":37,"column":58,"nodeType":"495","messageId":"496","endLine":37,"endColumn":61,"suggestions":"526"},{"ruleId":"493","severity":1,"message":"494","line":79,"column":39,"nodeType":"495","messageId":"496","endLine":79,"endColumn":42,"suggestions":"527"},{"ruleId":"493","severity":1,"message":"494","line":83,"column":40,"nodeType":"495","messageId":"496","endLine":83,"endColumn":43,"suggestions":"528"},{"ruleId":"403","severity":1,"message":"404","line":13,"column":35,"nodeType":"419","messageId":"406","endLine":17,"endColumn":5},{"ruleId":"403","severity":1,"message":"529","line":14,"column":3,"nodeType":"409","messageId":"530","endLine":14,"endColumn":15},{"ruleId":"493","severity":1,"message":"494","line":14,"column":12,"nodeType":"495","messageId":"496","endLine":14,"endColumn":15,"suggestions":"531"},{"ruleId":"403","severity":1,"message":"532","line":15,"column":3,"nodeType":"409","messageId":"530","endLine":15,"endColumn":14},{"ruleId":"493","severity":1,"message":"494","line":15,"column":11,"nodeType":"495","messageId":"496","endLine":15,"endColumn":14,"suggestions":"533"},{"ruleId":"403","severity":1,"message":"534","line":16,"column":3,"nodeType":"409","messageId":"530","endLine":16,"endColumn":19},{"ruleId":"493","severity":1,"message":"494","line":16,"column":16,"nodeType":"495","messageId":"496","endLine":16,"endColumn":19,"suggestions":"535"},{"ruleId":"430","severity":2,"message":"536","line":59,"column":7,"nodeType":"409","messageId":"432","endLine":59,"endColumn":15,"fix":"537"},{"ruleId":"493","severity":1,"message":"494","line":81,"column":14,"nodeType":"495","messageId":"496","endLine":81,"endColumn":17,"suggestions":"538"},{"ruleId":"539","severity":2,"message":"540","line":98,"column":13,"nodeType":"541","endLine":101,"endColumn":21},{"ruleId":"493","severity":1,"message":"494","line":123,"column":18,"nodeType":"495","messageId":"496","endLine":123,"endColumn":21,"suggestions":"542"},{"ruleId":"493","severity":1,"message":"494","line":18,"column":21,"nodeType":"495","messageId":"496","endLine":18,"endColumn":24,"suggestions":"543"},{"ruleId":"493","severity":1,"message":"494","line":20,"column":22,"nodeType":"495","messageId":"496","endLine":20,"endColumn":25,"suggestions":"544"},{"ruleId":"493","severity":1,"message":"494","line":22,"column":21,"nodeType":"495","messageId":"496","endLine":22,"endColumn":24,"suggestions":"545"},{"ruleId":"493","severity":1,"message":"494","line":24,"column":20,"nodeType":"495","messageId":"496","endLine":24,"endColumn":23,"suggestions":"546"},{"ruleId":"493","severity":1,"message":"494","line":26,"column":21,"nodeType":"495","messageId":"496","endLine":26,"endColumn":24,"suggestions":"547"},{"ruleId":"493","severity":1,"message":"494","line":32,"column":25,"nodeType":"495","messageId":"496","endLine":32,"endColumn":28,"suggestions":"548"},{"ruleId":"414","severity":2,"message":"549","line":36,"column":11,"nodeType":"409","messageId":"550","endLine":36,"endColumn":17,"fix":"551"},"@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-unused-vars","'s4' is defined but never used.","Identifier","unusedVar","'IselectedOption' is defined but never used.","'GET_EVERY' is defined but never used.","'extractDoc' is defined but never used.","@typescript-eslint/no-empty-interface","An empty interface is equivalent to `{}`.","noEmpty","@typescript-eslint/no-empty-function","Unexpected empty arrow function 'onError'.","ArrowFunctionExpression","unexpected","'useContext' is defined but never used.","'useState' is defined but never used.","'IIcons' is defined but never used.","'JDpreloader' is defined but never used.","'JDtooltip' is defined but never used.","'useQuery' is defined but never used.","'ME' is defined but never used.","'AppContext' is defined but never used.","'authRefetch' is defined but never used.","prefer-const","'storeOptions' is never reassigned. Use 'const' instead.","useConst",{"range":"552","text":"553"},"'prodOptions' is never reassigned. Use 'const' instead.",{"range":"554","text":"555"},"'prodStoreMatcher' is never reassigned. Use 'const' instead.",{"range":"556","text":"557"},"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","Unexpected empty arrow function.","'ProductBoardPageWrap' is assigned a value but never used.","'user' is assigned a value but never used.","'history' is assigned a value but never used.","'toast' is defined but never used.","'info' is assigned a value but never used.","no-empty","Empty block statement.","BlockStatement","'useMutation' is defined but never used.","'getOperationName' is defined but never used.","'SIGN_IN' is defined but never used.","'PhoneVerificationModal' is defined but never used.","'Paths' is defined but never used.","'signIn' is defined but never used.","'signInVariables' is defined but never used.","'verificationComplete' is defined but never used.","'verificationCompleteVariables' is defined but never used.","'VerificationEvent' is defined but never used.","'verificationStart' is defined but never used.","'verificationStartVariables' is defined but never used.","'VerificationTarget' is defined but never used.","'DEFAULT_VEIFI_METHOD' is defined but never used.","'completeMsg' is defined but never used.","'historyHook' is assigned a value but never used.","'verifiModalHook' is assigned a value but never used.","'gotoMain' is assigned a value but never used.","'param' is defined but never used.","'smsKey' is defined but never used.","'Bold' is defined but never used.","'onCompletedMessage' is defined but never used.","'LocalManager' is defined but never used.","'useEffect' is defined but never used.","@typescript-eslint/no-inferrable-types","Type boolean trivially inferred from a boolean literal, remove type annotation.","VariableDeclarator","noInferrableType",{"range":"558","text":"559"},{"range":"560","text":"559"},{"range":"561","text":"559"},"'history' is never reassigned. Use 'const' instead.",{"range":"562","text":"563"},"'_IItemFilter' is defined but never used.","'_IItemSort' is defined but never used.","'_InvoiceFilter' is defined but never used.","'_InvoiceSort' is defined but never used.","'customerResetPassword_CustomerResetPassword' is defined but never used.","'Link' is defined but never used.","'selected' is never reassigned. Use 'const' instead.",{"range":"564","text":"565"},"'TElements' is defined but never used.","'LazyQueryResult' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["566","567"],"no-prototype-builtins","Do not access Object.prototype method 'hasOwnProperty' from target object.","CallExpression","prototypeBuildIn","'TDefaultSort' is defined but never used.",["568","569"],["570","571"],"'operationName' is defined but never used.","@typescript-eslint/no-extra-semi","Unnecessary semicolon.","EmptyStatement",{"range":"572","text":"573"},["574","575"],["576","577"],"'error' is assigned a value but never used.",["578","579"],["580","581"],"'React' is defined but never used.",["582","583"],["584","585"],"'amt' is defined but never used.","'VerificationStartInput' is defined but never used.",["586","587"],["588","589"],["590","591"],["592","593"],["594","595"],["596","597"],["598","599"],["600","601"],["602","603"],"Argument 'special' should be typed with a non-any type.","anyTypedArg",["604","605"],"Argument 'length' should be typed with a non-any type.",["606","607"],"Argument 'enAndNumber' should be typed with a non-any type.",["608","609"],"'maxCount' is never reassigned. Use 'const' instead.",{"range":"610","text":"611"},["612","613"],"react/jsx-key","Missing \"key\" prop for element in iterator","JSXElement",["614","615"],["616","617"],["618","619"],["620","621"],["622","623"],["624","625"],["626","627"],"An interface declaring no members is equivalent to its supertype.","noEmptyWithSuper",{"range":"628","text":"629"},[307,347],"const storeOptions: IselectedOption[] = [];",[353,393],"const prodOptions: IselectedOption[] = [];",[399,444],"const prodStoreMatcher:TProductStoreMath[] = []",[917,926],"",[957,966],[1118,1127],[6092,6119],"const history = useHistory();",[908,949],"const selected: boolean = pathname === path",{"messageId":"630","fix":"631","desc":"632"},{"messageId":"633","fix":"634","desc":"635"},{"messageId":"630","fix":"636","desc":"632"},{"messageId":"633","fix":"637","desc":"635"},{"messageId":"630","fix":"638","desc":"632"},{"messageId":"633","fix":"639","desc":"635"},[604,615],"}\r\n\r\nconst",{"messageId":"630","fix":"640","desc":"632"},{"messageId":"633","fix":"641","desc":"635"},{"messageId":"630","fix":"642","desc":"632"},{"messageId":"633","fix":"643","desc":"635"},{"messageId":"630","fix":"644","desc":"632"},{"messageId":"633","fix":"645","desc":"635"},{"messageId":"630","fix":"646","desc":"632"},{"messageId":"633","fix":"647","desc":"635"},{"messageId":"630","fix":"648","desc":"632"},{"messageId":"633","fix":"649","desc":"635"},{"messageId":"630","fix":"650","desc":"632"},{"messageId":"633","fix":"651","desc":"635"},{"messageId":"630","fix":"652","desc":"632"},{"messageId":"633","fix":"653","desc":"635"},{"messageId":"630","fix":"654","desc":"632"},{"messageId":"633","fix":"655","desc":"635"},{"messageId":"630","fix":"656","desc":"632"},{"messageId":"633","fix":"657","desc":"635"},{"messageId":"630","fix":"658","desc":"632"},{"messageId":"633","fix":"659","desc":"635"},{"messageId":"630","fix":"660","desc":"632"},{"messageId":"633","fix":"661","desc":"635"},{"messageId":"630","fix":"662","desc":"632"},{"messageId":"633","fix":"663","desc":"635"},{"messageId":"630","fix":"664","desc":"632"},{"messageId":"633","fix":"665","desc":"635"},{"messageId":"630","fix":"666","desc":"632"},{"messageId":"633","fix":"667","desc":"635"},{"messageId":"630","fix":"668","desc":"632"},{"messageId":"633","fix":"669","desc":"635"},{"messageId":"630","fix":"670","desc":"632"},{"messageId":"633","fix":"671","desc":"635"},{"messageId":"630","fix":"672","desc":"632"},{"messageId":"633","fix":"673","desc":"635"},{"messageId":"630","fix":"674","desc":"632"},{"messageId":"633","fix":"675","desc":"635"},[1378,1395],"const maxCount = 3;",{"messageId":"630","fix":"676","desc":"632"},{"messageId":"633","fix":"677","desc":"635"},{"messageId":"630","fix":"678","desc":"632"},{"messageId":"633","fix":"679","desc":"635"},{"messageId":"630","fix":"680","desc":"632"},{"messageId":"633","fix":"681","desc":"635"},{"messageId":"630","fix":"682","desc":"632"},{"messageId":"633","fix":"683","desc":"635"},{"messageId":"630","fix":"684","desc":"632"},{"messageId":"633","fix":"685","desc":"635"},{"messageId":"630","fix":"686","desc":"632"},{"messageId":"633","fix":"687","desc":"635"},{"messageId":"630","fix":"688","desc":"632"},{"messageId":"633","fix":"689","desc":"635"},{"messageId":"630","fix":"690","desc":"632"},{"messageId":"633","fix":"691","desc":"635"},[1221,1260],"type IProps = TimerProps","suggestUnknown",{"range":"692","text":"693"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"692","text":"694"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"695","text":"693"},{"range":"695","text":"694"},{"range":"696","text":"693"},{"range":"696","text":"694"},{"range":"697","text":"693"},{"range":"697","text":"694"},{"range":"698","text":"693"},{"range":"698","text":"694"},{"range":"699","text":"693"},{"range":"699","text":"694"},{"range":"700","text":"693"},{"range":"700","text":"694"},{"range":"701","text":"693"},{"range":"701","text":"694"},{"range":"702","text":"693"},{"range":"702","text":"694"},{"range":"703","text":"693"},{"range":"703","text":"694"},{"range":"704","text":"693"},{"range":"704","text":"694"},{"range":"705","text":"693"},{"range":"705","text":"694"},{"range":"706","text":"693"},{"range":"706","text":"694"},{"range":"707","text":"693"},{"range":"707","text":"694"},{"range":"708","text":"693"},{"range":"708","text":"694"},{"range":"709","text":"693"},{"range":"709","text":"694"},{"range":"710","text":"693"},{"range":"710","text":"694"},{"range":"711","text":"693"},{"range":"711","text":"694"},{"range":"712","text":"693"},{"range":"712","text":"694"},{"range":"713","text":"693"},{"range":"713","text":"694"},{"range":"714","text":"693"},{"range":"714","text":"694"},{"range":"715","text":"693"},{"range":"715","text":"694"},{"range":"716","text":"693"},{"range":"716","text":"694"},{"range":"717","text":"693"},{"range":"717","text":"694"},{"range":"718","text":"693"},{"range":"718","text":"694"},{"range":"719","text":"693"},{"range":"719","text":"694"},{"range":"720","text":"693"},{"range":"720","text":"694"},{"range":"721","text":"693"},{"range":"721","text":"694"},{"range":"722","text":"693"},{"range":"722","text":"694"},[401,404],"unknown","never",[992,995],[3238,3241],[634,637],[2697,2700],[3685,3688],[4646,4649],[107,110],[232,235],[2114,2117],[2722,2725],[627,630],[695,698],[435,438],[1099,1102],[1226,1229],[2398,2401],[2516,2519],[422,425],[438,441],[459,462],[2021,2024],[3057,3060],[614,617],[698,701],[780,783],[860,863],[942,945],[1201,1204]]